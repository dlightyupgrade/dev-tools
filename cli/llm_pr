#!/bin/bash
# Local LLM GitHub PR Assistant
# 
# This script uses a local LLM (via Ollama) to generate PR descriptions
# based on git commit history between the current branch and the base branch.

set -e

# ANSI color codes
BLUE="\033[94m"
GREEN="\033[92m"
YELLOW="\033[93m"
RED="\033[91m"
ENDC="\033[0m"
BOLD="\033[1m"

# Default values
MODEL="phi3:mini"
EDIT=false
DRY_RUN=false
VERBOSE=false
BASE_BRANCH="master"

# Find the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Function to print help
print_help() {
  echo "Usage: llm_pr [options]"
  echo ""
  echo "Options:"
  echo "  -h, --help            Show this help message and exit"
  echo "  -m, --model MODEL     Specify the Ollama model to use (default: phi3:mini)"
  echo "  -e, --edit            Edit the generated PR description before submitting"
  echo "  -d, --dry-run         Show the generated PR description without submitting"
  echo "  -v, --verbose         Show verbose output including commits and prompt"
  echo "  -b, --base BRANCH     Base branch to compare against (default: main)"
  echo "  -t, --title TITLE     Custom PR title (optional)"
  echo ""
  echo "Requirements:"
  echo "  - Git installed and available in PATH"
  echo "  - GitHub CLI (gh) installed and authenticated"
  echo "  - Ollama installed and running"
  echo "  - Python 3.6+"
  exit 0
}

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      print_help
      ;;
    -m|--model)
      MODEL="$2"
      shift 2
      ;;
    -e|--edit)
      EDIT=true
      shift
      ;;
    -d|--dry-run)
      DRY_RUN=true
      shift
      ;;
    -v|--verbose)
      VERBOSE=true
      shift
      ;;
    -b|--base)
      BASE_BRANCH="$2"
      shift 2
      ;;
    -t|--title)
      PR_TITLE="$2"
      shift 2
      ;;
    *)
      echo -e "${RED}Error: Unknown option $1${ENDC}"
      print_help
      ;;
  esac
done

# Check if ollama is running
if ! curl -s http://localhost:11434/api/tags &>/dev/null; then
  echo -e "${RED}Error: Ollama server is not running.${ENDC}"
  echo -e "${YELLOW}Start it with: 'ollama serve'${ENDC}"
  exit 1
fi

# Check if gh is installed
if ! command -v gh &> /dev/null; then
  echo -e "${RED}Error: GitHub CLI (gh) is not installed.${ENDC}"
  echo -e "${YELLOW}Install it from: https://cli.github.com/${ENDC}"
  exit 1
fi

# Get current branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" == "$BASE_BRANCH" ]; then
  echo -e "${YELLOW}Warning: You are currently on the $BASE_BRANCH branch.${ENDC}"
  echo -e "${YELLOW}Please switch to a feature branch to create a PR.${ENDC}"
  exit 1
fi

# Check if the base branch exists locally, if not try to fetch it
if ! git rev-parse --verify --quiet "$BASE_BRANCH" &>/dev/null; then
  echo -e "${YELLOW}Base branch '$BASE_BRANCH' not found locally. Attempting to fetch from remote...${ENDC}"
  
  # Try to get the default remote name
  DEFAULT_REMOTE=$(git remote | head -n 1)
  if [ -z "$DEFAULT_REMOTE" ]; then
    echo -e "${RED}No remote repository configured. Please add a remote or specify an existing local branch.${ENDC}"
    exit 1
  fi
  
  # Try to fetch the branch from remote
  echo -e "${BLUE}Fetching '$BASE_BRANCH' from remote '$DEFAULT_REMOTE'...${ENDC}"
  if ! git fetch "$DEFAULT_REMOTE" "$BASE_BRANCH":"$BASE_BRANCH" &>/dev/null; then
    echo -e "${RED}Failed to fetch '$BASE_BRANCH' from remote. Creating PR without commit history.${ENDC}"
    
    # Set a flag to skip commit history processing
    SKIP_COMMIT_HISTORY=true
  else
    echo -e "${GREEN}Successfully fetched '$BASE_BRANCH' from remote.${ENDC}"
  fi
fi

# Extract ticket ID from branch name
extract_ticket_from_branch() {
  # Look for common ticket formats (e.g., SI-1234, JIRA-5678, ABC-901)
  if [[ $CURRENT_BRANCH =~ ([A-Z]+-[0-9]+) ]]; then
    echo "${BASH_REMATCH[1]}"
  elif [[ $CURRENT_BRANCH =~ nojira ]]; then
    echo "NOJIRA"
  else
    echo ""
  fi
}

TICKET_ID=$(extract_ticket_from_branch)

# If PR_TITLE is not set, generate one from the latest commit
if [ -z "$PR_TITLE" ]; then
  if [ -n "$TICKET_ID" ]; then
    PR_TITLE="$TICKET_ID: $(git log -1 --pretty=%s | sed -E "s/^($TICKET_ID: |$TICKET_ID )//i")"
  else
    PR_TITLE=$(git log -1 --pretty=%s)
  fi
fi

echo -e "${BLUE}Generating PR description for branch: ${BOLD}$CURRENT_BRANCH${ENDC}"
echo -e "${BLUE}Base branch: ${BOLD}$BASE_BRANCH${ENDC}"
echo -e "${BLUE}PR Title: ${BOLD}$PR_TITLE${ENDC}"

# Initialize variables for commits and diff summary
COMMITS=""
COMMIT_DETAILS=""
DIFF_SUMMARY=""

# If we're not skipping commit history, try to get commits between branches
if [ "${SKIP_COMMIT_HISTORY:-false}" != "true" ]; then
  # Get all commits between the current branch and the base branch
  COMMITS=$(git log --reverse "$BASE_BRANCH".."$CURRENT_BRANCH" --pretty=format:"%h %s" 2>/dev/null)
  COMMIT_DETAILS=$(git log --reverse "$BASE_BRANCH".."$CURRENT_BRANCH" --pretty=format:"%h %s%n%b" --name-status 2>/dev/null)
  
  # Get the diff summary
  DIFF_SUMMARY=$(git diff --stat "$BASE_BRANCH".."$CURRENT_BRANCH" 2>/dev/null)
  
  if [ -z "$COMMITS" ]; then
    echo -e "${YELLOW}No commits found between $CURRENT_BRANCH and $BASE_BRANCH.${ENDC}"
    echo -e "${YELLOW}Falling back to most recent commits on this branch.${ENDC}"
    SKIP_COMMIT_HISTORY=true
  fi
fi

# If no commit history from comparison with base branch, fall back to recent commits
if [ "${SKIP_COMMIT_HISTORY:-false}" = "true" ]; then
  echo -e "${BLUE}Using recent commits and staged changes for PR description...${ENDC}"
  
  # Get recent commits on current branch (last 10)
  COMMITS=$(git log -10 --pretty=format:"%h %s" 2>/dev/null)
  COMMIT_DETAILS=$(git log -10 --pretty=format:"%h %s%n%b" --name-status 2>/dev/null)
  
  # Get staged and unstaged changes
  DIFF_SUMMARY=$(git diff --stat 2>/dev/null)
  STAGED_DIFF=$(git diff --staged --stat 2>/dev/null)
  
  if [ -n "$STAGED_DIFF" ]; then
    DIFF_SUMMARY="$DIFF_SUMMARY\n\nStaged changes:\n$STAGED_DIFF"
  fi
  
  if [ -z "$COMMITS" ] && [ -z "$DIFF_SUMMARY" ]; then
    echo -e "${RED}No commits or changes found. Cannot generate PR description.${ENDC}"
    exit 1
  fi
fi

if [ "$VERBOSE" = true ]; then
  if [ "${SKIP_COMMIT_HISTORY:-false}" = "true" ]; then
    echo -e "${BLUE}Recent commits on current branch:${ENDC}"
  else
    echo -e "${BLUE}Commits between $BASE_BRANCH and $CURRENT_BRANCH:${ENDC}"
  fi
  echo "$COMMIT_DETAILS"
  echo ""
  echo -e "${BLUE}Diff summary:${ENDC}"
  echo -e "$DIFF_SUMMARY"
  echo ""
fi

# Create a temporary file for the prompt
PROMPT_FILE=$(mktemp)

# Get the path to the prompt templates
PROMPTS_DIR="$SCRIPT_DIR/prompts"
STANDARD_PR_PROMPT="$PROMPTS_DIR/standard_pr.prompt"
FALLBACK_PR_PROMPT="$PROMPTS_DIR/fallback_pr.prompt"

# Check if prompt files exist, if not generate them
if [ ! -f "$STANDARD_PR_PROMPT" ] || [ ! -f "$FALLBACK_PR_PROMPT" ]; then
  echo -e "${YELLOW}Prompt templates not found. Generating them...${ENDC}"
  cd "$PROMPTS_DIR" && python3 extract_prompts.py
  if [ $? -ne 0 ]; then
    echo -e "${RED}Failed to generate prompt templates. Using built-in fallbacks.${ENDC}"
    # Use built-in fallbacks if prompt generation fails
    FALLBACK_TEMPLATES=true
  fi
fi

# Create the prompt
if [ "${SKIP_COMMIT_HISTORY:-false}" = "true" ]; then
  # Different prompt when we don't have proper commit history
  if [ "${FALLBACK_TEMPLATES:-false}" = "true" ] || [ ! -f "$FALLBACK_PR_PROMPT" ]; then
    # Use built-in fallback if file doesn't exist
    cat > "$PROMPT_FILE" << EOF
You are a helpful assistant that generates high-quality GitHub PR descriptions.

Based on the following information, write a detailed PR description that includes:

1. A clear summary of what this PR appears to do (based on recent commits and changes)
2. The purpose of the changes, as best as can be determined
3. Any implementation details visible from the diffs and commits
4. General testing instructions

Format the response as markdown with appropriate headers and bullet points.
Return ONLY the PR description, nothing else.

# Recent Commits on This Branch
$COMMIT_DETAILS

# Current Changes
$DIFF_SUMMARY
EOF
  else
    # Use file template with variable substitution
    PROMPT_TEMPLATE=$(cat "$FALLBACK_PR_PROMPT")
    echo "${PROMPT_TEMPLATE/\{\}/$COMMIT_DETAILS}" | sed "s/\{\}/$DIFF_SUMMARY/" > "$PROMPT_FILE"
  fi
else
  # Standard prompt with commit history
  if [ "${FALLBACK_TEMPLATES:-false}" = "true" ] || [ ! -f "$STANDARD_PR_PROMPT" ]; then
    # Use built-in fallback if file doesn't exist
    cat > "$PROMPT_FILE" << EOF
You are a helpful assistant that generates high-quality GitHub PR descriptions.

Based on the following commits and changes, write a detailed PR description that includes:

1. A clear summary of what this PR does
2. Key changes and their purpose
3. Any important implementation details
4. Testing instructions if applicable

Format the response as markdown with appropriate headers and bullet points.
Return ONLY the PR description, nothing else.

# Commits
$COMMIT_DETAILS

# Diff Summary
$DIFF_SUMMARY
EOF
  else
    # Use file template with variable substitution
    PROMPT_TEMPLATE=$(cat "$STANDARD_PR_PROMPT")
    echo "${PROMPT_TEMPLATE/\{\}/$COMMIT_DETAILS}" | sed "s/\{\}/$DIFF_SUMMARY/" > "$PROMPT_FILE"
  fi
fi

if [ "$VERBOSE" = true ]; then
  echo -e "${BLUE}Prompt:${ENDC}"
  cat "$PROMPT_FILE"
  echo ""
fi

echo -e "${BLUE}Generating PR description using Ollama ($MODEL)...${ENDC}"

# Generate PR description using Ollama
PR_DESCRIPTION=$(curl -s http://localhost:11434/api/generate -d "{
  \"model\": \"$MODEL\",
  \"prompt\": $(cat "$PROMPT_FILE" | jq -Rs .)
}" | jq -r '.response')

# Clean up the temporary file
rm "$PROMPT_FILE"

# Display the generated PR description
echo -e "${GREEN}Generated PR description:${ENDC}"
echo -e "${BOLD}"
echo "$PR_DESCRIPTION"
echo -e "${ENDC}"

# If edit option is enabled, allow the user to edit the description
if [ "$EDIT" = true ]; then
  echo -e "${BLUE}Opening editor for you to modify the PR description...${ENDC}"
  TEMP_FILE=$(mktemp)
  echo "$PR_DESCRIPTION" > "$TEMP_FILE"
  ${EDITOR:-vim} "$TEMP_FILE"
  PR_DESCRIPTION=$(cat "$TEMP_FILE")
  rm "$TEMP_FILE"
  
  echo -e "${GREEN}Updated PR description:${ENDC}"
  echo -e "${BOLD}"
  echo "$PR_DESCRIPTION"
  echo -e "${ENDC}"
fi

# If not a dry run, create the PR
if [ "$DRY_RUN" = false ]; then
  echo -e "${BLUE}Creating GitHub PR...${ENDC}"
  
  # Create a temporary file for the PR description
  DESC_FILE=$(mktemp)
  echo "$PR_DESCRIPTION" > "$DESC_FILE"
  
  # Create the PR using GitHub CLI
  gh pr create --title "$PR_TITLE" --body-file "$DESC_FILE" --base "$BASE_BRANCH"
  
  # Clean up
  rm "$DESC_FILE"
else
  echo -e "${YELLOW}Dry run - no PR created${ENDC}"
fi