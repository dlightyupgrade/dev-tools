#!/bin/bash

# Check PR Violations - Extract linter/CI violations from GitHub PR comments
# Usage: check-pr-violations <pr-number> [owner/repository] [--claude]

set -e

# Parse arguments
PR_NUMBER="$1"
REPO_PARAM="$2"
CLAUDE_MODE="$3"
CHECK_NEWLINES="$4"

# Handle flag detection and repositioning
if [[ "$REPO_PARAM" == "--claude" ]]; then
    CLAUDE_MODE="--claude"
    REPO_PARAM=""
fi
if [[ "$CLAUDE_MODE" == "--check-newlines" ]]; then
    CHECK_NEWLINES="--check-newlines"
    CLAUDE_MODE=""
fi
if [[ "$CHECK_NEWLINES" == "--claude" ]]; then
    CLAUDE_MODE="--claude"
    CHECK_NEWLINES=""
fi

# Auto-detect repository if not provided
if [ -z "$REPO_PARAM" ] || [[ "$REPO_PARAM" == "--claude" ]] || [[ "$REPO_PARAM" == "--check-newlines" ]]; then
    # Try to detect from git remote
    if git remote get-url origin &>/dev/null; then
        REMOTE_URL=$(git remote get-url origin)
        if [[ "$REMOTE_URL" =~ github\.com[:/]([^/]+)/([^/.]+) ]]; then
            OWNER="${BASH_REMATCH[1]}"
            REPO="${BASH_REMATCH[2]}"
        else
            echo "‚ùå Could not parse GitHub URL from git remote"
            exit 1
        fi
    else
        echo "‚ùå Not in a git repository and no repository specified"
        exit 1
    fi
else
    # Parse owner/repo format
    if [[ "$REPO_PARAM" =~ ^([^/]+)/(.+)$ ]]; then
        OWNER="${BASH_REMATCH[1]}"
        REPO="${BASH_REMATCH[2]}"
    else
        # Assume just repo name with default owner
        OWNER="$(git config --get remote.origin.url | sed -n 's/.*github\.com[:/]\([^/]*\)\/.*/\1/p' 2>/dev/null || echo "OWNER")"
        REPO="$REPO_PARAM"
    fi
fi

if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" == "--help" ] || [ "$PR_NUMBER" == "-h" ]; then
    echo "Usage: check-pr-violations <pr-number> [owner/repository] [--claude] [--check-newlines]"
    echo ""
    echo "Examples:"
    echo "  check-pr-violations 2182                              # Auto-detect repo"
    echo "  check-pr-violations 2182 myorg/myrepo                 # Specify repo"
    echo "  check-pr-violations 2182 --claude                     # Auto-detect + Claude todo mode"
    echo "  check-pr-violations 2182 --claude --check-newlines    # Include missing newline check (slower)"
    echo "  check-pr-violations 2182 myorg/myrepo --claude"
    echo ""
    echo "Options:"
    echo "  --claude    Generate todo list for violations (requires Claude Code)"
    exit 1
fi

echo "üîç Checking PR #$PR_NUMBER in $OWNER/$REPO for violations..."
echo ""

# Get inline comments that contain violation reports
VIOLATIONS_JSON=$(gh api "repos/$OWNER/$REPO/pulls/$PR_NUMBER/comments" | jq -r '
    [.[] | 
    select(.body | contains("**Reporter**")) | 
    {
        file: .path,
        line: (.original_line // .line),
        severity: (.body | match("\\*\\*Severity\\*\\*: ([A-Z]+)"; "g").captures[0].string // "UNKNOWN"),
        rule: (.body | match("\\*\\*Rule\\*\\*: ([^\n]+)"; "g").captures[0].string // "Unknown rule"),
        message: (.body | split("\n") | .[5] // "Unable to extract message"),
        reporter: (.body | match("\\*\\*Reporter\\*\\*: ([^\n]+)"; "g").captures[0].string // "Unknown")
    }]
')

VIOLATIONS_COUNT=$(echo "$VIOLATIONS_JSON" | jq 'length')
VIOLATIONS_COUNT=${VIOLATIONS_COUNT//[$'\t\r\n ']/}  # Remove whitespace/newlines

# Check PR status and CI checks
echo "üîç Checking PR status and CI checks..."
PR_INFO=$(gh api "repos/$OWNER/$REPO/pulls/$PR_NUMBER")
MERGEABLE=$(echo "$PR_INFO" | jq -r '.mergeable // "unknown"')
MERGEABLE_STATE=$(echo "$PR_INFO" | jq -r '.mergeable_state // "unknown"')
HEAD_SHA=$(echo "$PR_INFO" | jq -r '.head.sha')

# Get check runs (more comprehensive than status API)
CHECK_RUNS=$(gh api "repos/$OWNER/$REPO/commits/$HEAD_SHA/check-runs" | jq '.check_runs')
FAILED_CHECKS=$(echo "$CHECK_RUNS" | jq -r '.[] | select(.conclusion == "failure") | .name')
FAILED_CHECK_COUNT=$(echo "$CHECK_RUNS" | jq '[.[] | select(.conclusion == "failure")] | length')
FAILED_CHECK_COUNT=${FAILED_CHECK_COUNT//[$'\t\r\n ']/}  # Remove whitespace/newlines
PENDING_CHECK_COUNT=$(echo "$CHECK_RUNS" | jq '[.[] | select(.status == "in_progress" or .status == "queued")] | length')
PENDING_CHECK_COUNT=${PENDING_CHECK_COUNT//[$'\t\r\n ']/}  # Remove whitespace/newlines

# Check if build is currently running and abort if so
if [ "$PENDING_CHECK_COUNT" -gt 0 ]; then
    RUNNING_CHECKS=$(echo "$CHECK_RUNS" | jq -r '.[] | select(.status == "in_progress" or .status == "queued") | .name')
    echo "üîÑ BUILD IN PROGRESS - Rebuilding, try again later"
    echo ""
    echo "Currently running checks:"
    echo "$RUNNING_CHECKS" | while read -r check; do
        [ -n "$check" ] && echo "  ‚è≥ $check"
    done
    echo ""
    echo "üí° Wait for the build to complete, then re-run this script for accurate results."
    exit 0
fi

echo "üîç Checking review threads..."
REVIEW_THREADS=$(gh api graphql -f query="
{
  repository(owner: \"$OWNER\", name: \"$REPO\") {
    pullRequest(number: $PR_NUMBER) {
      reviewThreads(first: 100) {
        nodes {
          id
          isResolved
          isCollapsed
          isOutdated
          path
          line
          comments(first: 10) {
            nodes {
              author {
                login
              }
              body
              createdAt
            }
          }
        }
      }
    }
  }
}" | jq -r '
    .data.repository.pullRequest.reviewThreads.nodes | 
    map(select(.isResolved == false and .isCollapsed == false and .isOutdated == false)) |
    map({
        file: .path,
        line: .line,
        thread_length: (.comments.nodes | length),
        last_comment_author: (.comments.nodes | last | .author.login),
        first_comment_author: (.comments.nodes | first | .author.login),
        last_comment_time: (.comments.nodes | last | .createdAt),
        first_comment_body: (.comments.nodes | first | .body),
        last_comment_body: (.comments.nodes | last | .body),
        is_resolved: .isResolved,
        is_collapsed: .isCollapsed,
        is_outdated: .isOutdated
    })
')

REVIEW_THREADS_COUNT=$(echo "$REVIEW_THREADS" | jq 'length')
REVIEW_THREADS_COUNT=${REVIEW_THREADS_COUNT//[$'\t\r\n ']/}  # Remove whitespace/newlines

# Function to extract action item from comment body
extract_action_item() {
    local comment_body="$1"
    local file_name="$2"
    local line_num="$3"
    
    # Clean up comment body - remove markdown, trim whitespace
    local clean_comment=$(echo "$comment_body" | sed 's/```[^`]*```//g' | sed 's/`[^`]*`//g' | sed 's/\*\*//g' | sed 's/\*//g' | tr '\n' ' ' | sed 's/  */ /g' | sed 's/^ *//g' | sed 's/ *$//g')
    
    # Truncate if too long
    if [ ${#clean_comment} -gt 100 ]; then
        clean_comment="${clean_comment:0:97}..."
    fi
    
    # Categorize action type based on common patterns
    if echo "$clean_comment" | grep -qi "why\|what\|how\|explain\|clarify\|understand"; then
        echo "Answer question: $clean_comment"
    elif echo "$clean_comment" | grep -qi "remove\|delete\|unused"; then
        echo "Remove: $clean_comment" 
    elif echo "$clean_comment" | grep -qi "add\|include\|missing"; then
        echo "Add: $clean_comment"
    elif echo "$clean_comment" | grep -qi "change\|modify\|update\|fix"; then
        echo "Fix: $clean_comment"
    elif echo "$clean_comment" | grep -qi "consider\|suggest\|recommend"; then
        echo "Consider: $clean_comment"
    elif echo "$clean_comment" | grep -qi "should\|must\|need"; then
        echo "Required: $clean_comment"
    else
        # Default - show first 80 chars of comment
        if [ ${#clean_comment} -gt 80 ]; then
            echo "Review: ${clean_comment:0:77}..."
        else
            echo "Review: $clean_comment"
        fi
    fi
}

# Check for missing trailing newlines (optional)
MISSING_NEWLINES=""
MISSING_NEWLINES_COUNT=0
if [ "$CHECK_NEWLINES" == "--check-newlines" ]; then
    echo "üîç Checking for missing trailing newlines (this may take a moment)..."
    
    # Get list of modified files and check each one
    MODIFIED_FILES=$(gh api "repos/$OWNER/$REPO/pulls/$PR_NUMBER/files" --paginate | jq -r '.[].filename')
    
    for file in $MODIFIED_FILES; do
        # Small delay to be rate-limit friendly
        sleep 0.1
        
        # Only check certain file types to reduce API calls
        case "$file" in
            *.java|*.xml|*.md|*.properties|*.yml|*.yaml|*.json|*.sql)
                CONTENT=$(gh api "repos/$OWNER/$REPO/contents/$file?ref=$HEAD_SHA" --jq '.content' 2>/dev/null | base64 -d 2>/dev/null)
                if [ $? -eq 0 ] && [ -n "$CONTENT" ]; then
                    # Check if last character is NOT a newline
                    if ! printf '%s' "$CONTENT" | tail -c1 | grep -q '^$'; then
                        MISSING_NEWLINES="${MISSING_NEWLINES}Missing newline: $file"$'\n'
                    fi
                fi
                ;;
        esac
    done
    
    MISSING_NEWLINES_COUNT=$(echo "$MISSING_NEWLINES" | grep -c "Missing newline:" 2>/dev/null || echo 0)
    MISSING_NEWLINES_COUNT=${MISSING_NEWLINES_COUNT//[$'\t\r\n ']/}  # Remove whitespace/newlines
fi

# Check for stale PR warnings from GitHub Actions
STALE_COMMENTS=$(gh pr view "$PR_NUMBER" --comments --json comments | jq -r '.comments[] | select(.author.login == "github-actions[bot]" or .author.login == "github-actions") | select(.body | contains("stale") or contains("Stale")) | .body')
STALE_COUNT=$(echo "$STALE_COMMENTS" | grep -c "stale\|Stale" 2>/dev/null || echo 0)
STALE_COUNT=${STALE_COUNT//[$'\t\r\n ']/}  # Remove whitespace/newlines

# Get PR author
PR_AUTHOR=$(gh api "repos/$OWNER/$REPO/pulls/$PR_NUMBER" | jq -r '.user.login')

# Display CI status and merge conflicts
if [ "$MERGEABLE" = "false" ] || [ "$MERGEABLE_STATE" = "dirty" ]; then
    echo "üö® MERGE CONFLICTS:"
    case "$MERGEABLE_STATE" in
        "dirty")
            echo "‚ùå Merge conflicts detected - branch has conflicts with base branch"
            echo "üîß Action needed: Resolve conflicts by rebasing or merging base branch"
            ;;
        "unstable")
            echo "‚ö†Ô∏è  CI checks failing - merge blocked by failing status checks"
            ;;
        *)
            echo "‚ùì Cannot merge - state: $MERGEABLE_STATE"
            ;;
    esac
    echo ""
fi

if [ "$FAILED_CHECK_COUNT" -gt 0 ]; then
    echo "‚ùå FAILED CI CHECKS:"
    echo "$FAILED_CHECKS" | while read -r check; do
        [ -n "$check" ] && echo "  üí• $check"
    done
    echo ""
fi

if [ "$PENDING_CHECK_COUNT" -gt 0 ]; then
    echo "‚è≥ CI checks still running ($PENDING_CHECK_COUNT pending)"
    echo ""
fi

# Display missing newlines
if [ "$MISSING_NEWLINES_COUNT" -gt 0 ]; then
    echo "üìÑ MISSING TRAILING NEWLINES:"
    echo "$MISSING_NEWLINES" | sed 's/Missing newline: /  üìù /' 
    echo ""
fi

# Display stale PR warnings
if [ "$STALE_COUNT" -gt 0 ]; then
    echo "‚ö†Ô∏è  STALE PR WARNING:"
    echo "$STALE_COMMENTS" | head -1 | while read -r comment; do
        echo "üïê $comment"
    done
    echo ""
fi

# Check if PR is completely clean
if [ "$VIOLATIONS_COUNT" -eq 0 ] && [ "$REVIEW_THREADS_COUNT" -eq 0 ] && [ "$FAILED_CHECK_COUNT" -eq 0 ] && [ "$MERGEABLE" != "false" ] && [ "$MERGEABLE_STATE" != "dirty" ] && [ "$STALE_COUNT" -eq 0 ] && [ "$MISSING_NEWLINES_COUNT" -eq 0 ]; then
    echo "‚úÖ No violations, review threads, CI issues, stale warnings, or missing newlines found in PR #$PR_NUMBER"
    if [ "$CLAUDE_MODE" == "--claude" ]; then
        echo ""
        echo "ü§ñ No todo items needed - PR is completely clean!"
    fi
    exit 0
fi

# Display violations in human-readable format
if [ "$VIOLATIONS_COUNT" -gt 0 ]; then
    echo "‚ö†Ô∏è  AUTOMATED VIOLATIONS:"
    echo "$VIOLATIONS_JSON" | jq -r '.[] | 
        "üìÅ File: \(.file)\nüìç Line: \(.line)\n‚ö†Ô∏è  Severity: \(.severity)\nüîß Rule: \(.rule)\nü§ñ Reporter: \(.reporter)\nüí¨ Message: \(.message)\n" + ("‚îÄ" * 80)'
    echo ""
fi

# Display review threads (truly unresolved only - not resolved, collapsed, or outdated)
if [ "$REVIEW_THREADS_COUNT" -gt 0 ]; then
    echo "üí¨ ACTIVE REVIEW THREADS (requiring attention):"
    echo "$REVIEW_THREADS" | jq -r --arg pr_author "$PR_AUTHOR" '.[] | 
        "üìÅ File: \(.file // "General comment")\nüìç Line: \(.line // "N/A")\nüí≠ Thread: \(.thread_length) comments\nüë§ Last response: \(.last_comment_author)\n" + 
        (if .last_comment_author == $pr_author then "‚úÖ Status: Author responded - needs reviewer resolution" else "‚ùì Status: Awaiting author response" end) + 
        "\n" + ("‚îÄ" * 80)'
    echo ""
fi

echo "üìä Summary: Found $VIOLATIONS_COUNT violation(s), $REVIEW_THREADS_COUNT review thread(s), $FAILED_CHECK_COUNT failed check(s), $STALE_COUNT stale warning(s)$([ "$MISSING_NEWLINES_COUNT" -gt 0 ] && echo ", $MISSING_NEWLINES_COUNT missing newline(s)" || echo "")"
if [ "$MERGEABLE" = "false" ] || [ "$MERGEABLE_STATE" = "dirty" ]; then
    echo "üö® Merge conflicts detected - cannot merge until resolved"
fi
if [ "$STALE_COUNT" -gt 0 ]; then
    echo "‚ö†Ô∏è  Stale PR detected - may be auto-closed soon"
fi

# Claude mode - generate todo list
if [ "$CLAUDE_MODE" == "--claude" ]; then
    echo ""
    echo "ü§ñ Generating todo list for Claude Code..."
    echo ""
    
    # Count actionable items (violations + threads needing author response + CI failures + merge conflicts + stale warnings + missing newlines)
    ACTIONABLE_VIOLATIONS=${VIOLATIONS_COUNT:-0}
    ACTIONABLE_THREADS=$(echo "$REVIEW_THREADS" | jq --arg pr_author "$PR_AUTHOR" '[.[] | select(.last_comment_author != $pr_author)] | length')
    ACTIONABLE_THREADS=${ACTIONABLE_THREADS//[$'\t\r\n ']/}  # Remove whitespace/newlines
    ACTIONABLE_CI=${FAILED_CHECK_COUNT:-0}
    ACTIONABLE_MERGE=$([ "$MERGEABLE" = "false" ] || [ "$MERGEABLE_STATE" = "dirty" ] && echo 1 || echo 0)
    ACTIONABLE_STALE=${STALE_COUNT:-0}
    ACTIONABLE_NEWLINES=${MISSING_NEWLINES_COUNT:-0}
    TOTAL_ACTIONABLE=$((ACTIONABLE_VIOLATIONS + ACTIONABLE_THREADS + ACTIONABLE_CI + ACTIONABLE_MERGE + ACTIONABLE_STALE + ACTIONABLE_NEWLINES))
    
    if [ "$TOTAL_ACTIONABLE" -eq 0 ]; then
        echo "üéâ No actionable items found!"
        echo ""
        if [ "$REVIEW_THREADS_COUNT" -gt 0 ]; then
            echo "üìù Review thread status: Author has responded to all reviewer comments"
        fi
        echo "‚úÖ PR appears ready for reviewer approval"
    else
        echo "Please create the following todos:"
        echo ""
        
        # Add violation todos
        if [ "$VIOLATIONS_COUNT" -gt 0 ]; then
            echo "$VIOLATIONS_JSON" | jq -r 'to_entries | .[] | 
                "TODO #\(.key + 1): Fix \(.value.severity | ascii_downcase) - \(.value.message | gsub("\\.$"; "")) in \(.value.file | split("/") | .[-1]) line \(.value.line)"' | 
            while read -r todo; do
                echo "  $todo"
            done
        fi
        
        # Add review thread todos with specific action items
        if [ "$ACTIONABLE_THREADS" -gt 0 ]; then
            TODO_BASE=$VIOLATIONS_COUNT
            COUNTER=1
            # Use a more robust approach to handle comment bodies with spaces and newlines
            while IFS= read -r thread_data; do
                if [ -n "$thread_data" ]; then
                    file=$(echo "$thread_data" | jq -r '.file // "Unknown"')
                    line=$(echo "$thread_data" | jq -r '.line // "0"')
                    comment_body=$(echo "$thread_data" | jq -r '.first_comment_body // ""')
                    
                    file_name=$(basename "$file")
                    action_item=$(extract_action_item "$comment_body" "$file_name" "$line")
                    echo "  TODO #$((TODO_BASE + COUNTER)): $action_item in $file_name line $line"
                    ((COUNTER++))
                fi
            done < <(echo "$REVIEW_THREADS" | jq -c --arg pr_author "$PR_AUTHOR" '.[] | select(.last_comment_author != $pr_author)')
        fi
        
        # Add CI failure todos
        if [ "$ACTIONABLE_CI" -gt 0 ]; then
            TODO_BASE=$((VIOLATIONS_COUNT + ACTIONABLE_THREADS))
            COUNTER=1
            echo "$FAILED_CHECKS" | while read -r check; do
                if [ -n "$check" ]; then
                    echo "  TODO #$((TODO_BASE + COUNTER)): Fix failed CI check: $check"
                    ((COUNTER++))
                fi
            done
        fi
        
        # Add merge conflict todo
        if [ "$ACTIONABLE_MERGE" -gt 0 ]; then
            TODO_NUM=$((VIOLATIONS_COUNT + ACTIONABLE_THREADS + ACTIONABLE_CI + 1))
            case "$MERGEABLE_STATE" in
                "dirty")
                    echo "  TODO #$TODO_NUM: Resolve merge conflicts (rebase or merge base branch)"
                    ;;
                *)
                    echo "  TODO #$TODO_NUM: Fix merge issues (state: $MERGEABLE_STATE)"
                    ;;
            esac
        fi
        
        # Add stale PR todo
        if [ "$ACTIONABLE_STALE" -gt 0 ]; then
            TODO_NUM=$((VIOLATIONS_COUNT + ACTIONABLE_THREADS + ACTIONABLE_CI + ACTIONABLE_MERGE + 1))
            echo "  TODO #$TODO_NUM: Address stale PR warning (add activity or remove stale label)"
        fi
        
        # Add missing newlines todos
        if [ "$ACTIONABLE_NEWLINES" -gt 0 ]; then
            TODO_BASE=$((VIOLATIONS_COUNT + ACTIONABLE_THREADS + ACTIONABLE_CI + ACTIONABLE_MERGE + ACTIONABLE_STALE))
            COUNTER=1
            echo "$MISSING_NEWLINES" | grep "Missing newline:" | while read -r newline_info; do
                if [ -n "$newline_info" ]; then
                    file_name=$(echo "$newline_info" | sed 's/Missing newline: //')
                    file_basename=$(basename "$file_name")
                    echo "  TODO #$((TODO_BASE + COUNTER)): Add trailing newline to $file_basename"
                    ((COUNTER++))
                fi
            done
        fi
        
        echo ""
        echo "üí° Suggested workflow:"
        echo "   1. Create todos using TodoWrite tool"
        echo "   2. Mark each todo as 'in_progress' when working on it" 
        echo "   3. Fix violations or respond to review comments"
        echo "   4. Mark todo as 'completed' when fixed"
        echo "   5. Re-run this script to verify all items are resolved"
    fi
fi