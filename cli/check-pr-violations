#!/bin/bash

# Check PR Violations - Extract linter/CI violations from GitHub PR comments
# Usage: check-pr-violations <pr-number> [owner/repository] [--claude]

set -e

# Parse arguments
PR_NUMBER="$1"
REPO_PARAM="$2"
CLAUDE_MODE="$3"

# Auto-detect repository if not provided
if [ -z "$REPO_PARAM" ] || [[ "$REPO_PARAM" == "--claude" ]]; then
    if [ "$REPO_PARAM" == "--claude" ]; then
        CLAUDE_MODE="--claude"
    fi
    # Try to detect from git remote
    if git remote get-url origin &>/dev/null; then
        REMOTE_URL=$(git remote get-url origin)
        if [[ "$REMOTE_URL" =~ github\.com[:/]([^/]+)/([^/.]+) ]]; then
            OWNER="${BASH_REMATCH[1]}"
            REPO="${BASH_REMATCH[2]}"
        else
            echo "‚ùå Could not parse GitHub URL from git remote"
            exit 1
        fi
    else
        echo "‚ùå Not in a git repository and no repository specified"
        exit 1
    fi
else
    # Parse owner/repo format
    if [[ "$REPO_PARAM" =~ ^([^/]+)/(.+)$ ]]; then
        OWNER="${BASH_REMATCH[1]}"
        REPO="${BASH_REMATCH[2]}"
    else
        # Assume just repo name with default owner
        OWNER="$(git config --get remote.origin.url | sed -n 's/.*github\.com[:/]\([^/]*\)\/.*/\1/p' 2>/dev/null || echo "OWNER")"
        REPO="$REPO_PARAM"
    fi
fi

if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" == "--help" ] || [ "$PR_NUMBER" == "-h" ]; then
    echo "Usage: check-pr-violations <pr-number> [owner/repository] [--claude]"
    echo ""
    echo "Examples:"
    echo "  check-pr-violations 2182                    # Auto-detect repo"
    echo "  check-pr-violations 2182 myorg/myrepo       # Specify repo"
    echo "  check-pr-violations 2182 --claude           # Auto-detect + Claude todo mode"
    echo "  check-pr-violations 2182 myorg/myrepo --claude"
    echo ""
    echo "Options:"
    echo "  --claude    Generate todo list for violations (requires Claude Code)"
    exit 1
fi

echo "üîç Checking PR #$PR_NUMBER in $OWNER/$REPO for violations..."
echo ""

# Get inline comments that contain violation reports
VIOLATIONS_JSON=$(gh api "repos/$OWNER/$REPO/pulls/$PR_NUMBER/comments" | jq -r '
    [.[] | 
    select(.body | contains("**Reporter**")) | 
    {
        file: .path,
        line: (.original_line // .line),
        severity: (.body | match("\\*\\*Severity\\*\\*: ([A-Z]+)"; "g").captures[0].string // "UNKNOWN"),
        rule: (.body | match("\\*\\*Rule\\*\\*: ([^\n]+)"; "g").captures[0].string // "Unknown rule"),
        message: (.body | split("\n") | .[5] // "Unable to extract message"),
        reporter: (.body | match("\\*\\*Reporter\\*\\*: ([^\n]+)"; "g").captures[0].string // "Unknown")
    }]
')

VIOLATIONS_COUNT=$(echo "$VIOLATIONS_JSON" | jq 'length')

# Check for review threads
echo "üîç Checking review threads..."
REVIEW_THREADS=$(gh api "repos/$OWNER/$REPO/pulls/$PR_NUMBER/comments" | jq -r '
    group_by(.original_position // .position) | 
    map(select(length > 1)) | 
    map({
        file: .[0].path,
        line: (.[0].original_line // .[0].line),
        thread_length: length,
        last_comment_author: .[-1].user.login,
        first_comment_author: .[0].user.login,
        last_comment_time: .[-1].created_at
    }) | 
    map(select(.first_comment_author != .last_comment_author))
')

REVIEW_THREADS_COUNT=$(echo "$REVIEW_THREADS" | jq 'length')

# Get PR author
PR_AUTHOR=$(gh api "repos/$OWNER/$REPO/pulls/$PR_NUMBER" | jq -r '.user.login')

if [ "$VIOLATIONS_COUNT" -eq 0 ] && [ "$REVIEW_THREADS_COUNT" -eq 0 ]; then
    echo "‚úÖ No violations or unresolved review threads found in PR #$PR_NUMBER"
    if [ "$CLAUDE_MODE" == "--claude" ]; then
        echo ""
        echo "ü§ñ No todo items needed - PR is clean!"
    fi
    exit 0
fi

# Display violations in human-readable format
if [ "$VIOLATIONS_COUNT" -gt 0 ]; then
    echo "‚ö†Ô∏è  AUTOMATED VIOLATIONS:"
    echo "$VIOLATIONS_JSON" | jq -r '.[] | 
        "üìÅ File: \(.file)\nüìç Line: \(.line)\n‚ö†Ô∏è  Severity: \(.severity)\nüîß Rule: \(.rule)\nü§ñ Reporter: \(.reporter)\nüí¨ Message: \(.message)\n" + ("‚îÄ" * 80)'
    echo ""
fi

# Display review threads
if [ "$REVIEW_THREADS_COUNT" -gt 0 ]; then
    echo "üí¨ REVIEW THREADS:"
    echo "$REVIEW_THREADS" | jq -r --arg pr_author "$PR_AUTHOR" '.[] | 
        "üìÅ File: \(.file)\nüìç Line: \(.line)\nüí≠ Thread: \(.thread_length) comments\nüë§ Last response: \(.last_comment_author)\n" + 
        (if .last_comment_author == $pr_author then "‚úÖ Status: Author responded" else "‚ùì Status: Awaiting author response" end) + 
        "\n" + ("‚îÄ" * 80)'
    echo ""
fi

echo "üìä Summary: Found $VIOLATIONS_COUNT violation(s) and $REVIEW_THREADS_COUNT review thread(s)"

# Claude mode - generate todo list
if [ "$CLAUDE_MODE" == "--claude" ]; then
    echo ""
    echo "ü§ñ Generating todo list for Claude Code..."
    echo ""
    
    # Count actionable items (violations + threads needing author response)
    ACTIONABLE_VIOLATIONS=$VIOLATIONS_COUNT
    ACTIONABLE_THREADS=$(echo "$REVIEW_THREADS" | jq --arg pr_author "$PR_AUTHOR" '[.[] | select(.last_comment_author != $pr_author)] | length')
    TOTAL_ACTIONABLE=$((ACTIONABLE_VIOLATIONS + ACTIONABLE_THREADS))
    
    if [ "$TOTAL_ACTIONABLE" -eq 0 ]; then
        echo "üéâ No actionable items found!"
        echo ""
        if [ "$REVIEW_THREADS_COUNT" -gt 0 ]; then
            echo "üìù Review thread status: Author has responded to all reviewer comments"
        fi
        echo "‚úÖ PR appears ready for reviewer approval"
    else
        echo "Please create the following todos:"
        echo ""
        
        # Add violation todos
        if [ "$VIOLATIONS_COUNT" -gt 0 ]; then
            echo "$VIOLATIONS_JSON" | jq -r 'to_entries | .[] | 
                "TODO #\(.key + 1): Fix \(.value.severity | ascii_downcase) - \(.value.message | gsub("\\.$"; "")) in \(.value.file | split("/") | .[-1]) line \(.value.line)"' | 
            while read -r todo; do
                echo "  $todo"
            done
        fi
        
        # Add review thread todos  
        if [ "$ACTIONABLE_THREADS" -gt 0 ]; then
            echo "$REVIEW_THREADS" | jq -r --arg pr_author "$PR_AUTHOR" 'to_entries | .[] | select(.value.last_comment_author != $pr_author) |
                "TODO #\(.key + '$VIOLATIONS_COUNT' + 1): Respond to review comment in \(.value.file | split("/") | .[-1]) line \(.value.line)"' |
            while read -r todo; do
                echo "  $todo"
            done
        fi
        
        echo ""
        echo "üí° Suggested workflow:"
        echo "   1. Create todos using TodoWrite tool"
        echo "   2. Mark each todo as 'in_progress' when working on it" 
        echo "   3. Fix violations or respond to review comments"
        echo "   4. Mark todo as 'completed' when fixed"
        echo "   5. Re-run this script to verify all items are resolved"
    fi
fi