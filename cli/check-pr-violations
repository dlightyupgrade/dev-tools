#!/bin/bash

# Check PR Violations - Extract linter/CI violations from GitHub PR comments
# Usage: check-pr-violations <pr-number> [owner/repository] [--claude]

set -e

# Parse arguments
PR_NUMBER="$1"
REPO_PARAM="$2"
CLAUDE_MODE="$3"

# Auto-detect repository if not provided
if [ -z "$REPO_PARAM" ] || [[ "$REPO_PARAM" == "--claude" ]]; then
    if [ "$REPO_PARAM" == "--claude" ]; then
        CLAUDE_MODE="--claude"
    fi
    # Try to detect from git remote
    if git remote get-url origin &>/dev/null; then
        REMOTE_URL=$(git remote get-url origin)
        if [[ "$REMOTE_URL" =~ github\.com[:/]([^/]+)/([^/.]+) ]]; then
            OWNER="${BASH_REMATCH[1]}"
            REPO="${BASH_REMATCH[2]}"
        else
            echo "‚ùå Could not parse GitHub URL from git remote"
            exit 1
        fi
    else
        echo "‚ùå Not in a git repository and no repository specified"
        exit 1
    fi
else
    # Parse owner/repo format
    if [[ "$REPO_PARAM" =~ ^([^/]+)/(.+)$ ]]; then
        OWNER="${BASH_REMATCH[1]}"
        REPO="${BASH_REMATCH[2]}"
    else
        # Assume just repo name with default owner
        OWNER="$(git config --get remote.origin.url | sed -n 's/.*github\.com[:/]\([^/]*\)\/.*/\1/p' 2>/dev/null || echo "OWNER")"
        REPO="$REPO_PARAM"
    fi
fi

if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" == "--help" ] || [ "$PR_NUMBER" == "-h" ]; then
    echo "Usage: check-pr-violations <pr-number> [owner/repository] [--claude]"
    echo ""
    echo "Examples:"
    echo "  check-pr-violations 2182                    # Auto-detect repo"
    echo "  check-pr-violations 2182 myorg/myrepo       # Specify repo"
    echo "  check-pr-violations 2182 --claude           # Auto-detect + Claude todo mode"
    echo "  check-pr-violations 2182 myorg/myrepo --claude"
    echo ""
    echo "Options:"
    echo "  --claude    Generate todo list for violations (requires Claude Code)"
    exit 1
fi

echo "üîç Checking PR #$PR_NUMBER in $OWNER/$REPO for violations..."
echo ""

# Get inline comments that contain violation reports
VIOLATIONS_JSON=$(gh api "repos/$OWNER/$REPO/pulls/$PR_NUMBER/comments" | jq -r '
    [.[] | 
    select(.body | contains("**Reporter**")) | 
    {
        file: .path,
        line: (.original_line // .line),
        severity: (.body | match("\\*\\*Severity\\*\\*: ([A-Z]+)"; "g").captures[0].string // "UNKNOWN"),
        rule: (.body | match("\\*\\*Rule\\*\\*: ([^\n]+)"; "g").captures[0].string // "Unknown rule"),
        message: (.body | split("\n") | .[5] // "Unable to extract message"),
        reporter: (.body | match("\\*\\*Reporter\\*\\*: ([^\n]+)"; "g").captures[0].string // "Unknown")
    }]
')

VIOLATIONS_COUNT=$(echo "$VIOLATIONS_JSON" | jq 'length')

# Check PR status and CI checks
echo "üîç Checking PR status and CI checks..."
PR_INFO=$(gh api "repos/$OWNER/$REPO/pulls/$PR_NUMBER")
MERGEABLE=$(echo "$PR_INFO" | jq -r '.mergeable // "unknown"')
MERGEABLE_STATE=$(echo "$PR_INFO" | jq -r '.mergeable_state // "unknown"')
HEAD_SHA=$(echo "$PR_INFO" | jq -r '.head.sha')

# Get check runs (more comprehensive than status API)
CHECK_RUNS=$(gh api "repos/$OWNER/$REPO/commits/$HEAD_SHA/check-runs" | jq '.check_runs')
FAILED_CHECKS=$(echo "$CHECK_RUNS" | jq -r '.[] | select(.conclusion == "failure") | .name')
FAILED_CHECK_COUNT=$(echo "$CHECK_RUNS" | jq '[.[] | select(.conclusion == "failure")] | length')
PENDING_CHECK_COUNT=$(echo "$CHECK_RUNS" | jq '[.[] | select(.status == "in_progress" or .status == "queued")] | length')

echo "üîç Checking review threads..."
REVIEW_THREADS=$(gh api "repos/$OWNER/$REPO/pulls/$PR_NUMBER/comments" | jq -r '
    group_by(.original_position // .position) | 
    map(select(length > 1)) | 
    map({
        file: .[0].path,
        line: (.[0].original_line // .[0].line),
        thread_length: length,
        last_comment_author: .[-1].user.login,
        first_comment_author: .[0].user.login,
        last_comment_time: .[-1].created_at
    }) | 
    map(select(.first_comment_author != .last_comment_author))
')

REVIEW_THREADS_COUNT=$(echo "$REVIEW_THREADS" | jq 'length')

# Check for stale PR warnings from GitHub Actions
STALE_COMMENTS=$(gh pr view "$PR_NUMBER" --comments --json comments | jq -r '.comments[] | select(.author.login == "github-actions[bot]" or .author.login == "github-actions") | select(.body | contains("stale") or contains("Stale")) | .body')
STALE_COUNT=$(echo "$STALE_COMMENTS" | grep -c "stale\|Stale" 2>/dev/null || echo 0)

# Get PR author
PR_AUTHOR=$(gh api "repos/$OWNER/$REPO/pulls/$PR_NUMBER" | jq -r '.user.login')

# Display CI status and merge conflicts
if [ "$MERGEABLE" = "false" ] || [ "$MERGEABLE_STATE" = "dirty" ]; then
    echo "üö® MERGE CONFLICTS:"
    case "$MERGEABLE_STATE" in
        "dirty")
            echo "‚ùå Merge conflicts detected - branch has conflicts with base branch"
            echo "üîß Action needed: Resolve conflicts by rebasing or merging base branch"
            ;;
        "unstable")
            echo "‚ö†Ô∏è  CI checks failing - merge blocked by failing status checks"
            ;;
        *)
            echo "‚ùì Cannot merge - state: $MERGEABLE_STATE"
            ;;
    esac
    echo ""
fi

if [ "$FAILED_CHECK_COUNT" -gt 0 ]; then
    echo "‚ùå FAILED CI CHECKS:"
    echo "$FAILED_CHECKS" | while read -r check; do
        [ -n "$check" ] && echo "  üí• $check"
    done
    echo ""
fi

if [ "$PENDING_CHECK_COUNT" -gt 0 ]; then
    echo "‚è≥ CI checks still running ($PENDING_CHECK_COUNT pending)"
    echo ""
fi

# Display stale PR warnings
if [ "$STALE_COUNT" -gt 0 ]; then
    echo "‚ö†Ô∏è  STALE PR WARNING:"
    echo "$STALE_COMMENTS" | head -1 | while read -r comment; do
        echo "üïê $comment"
    done
    echo ""
fi

# Check if PR is completely clean
if [ "$VIOLATIONS_COUNT" -eq 0 ] && [ "$REVIEW_THREADS_COUNT" -eq 0 ] && [ "$FAILED_CHECK_COUNT" -eq 0 ] && [ "$MERGEABLE" != "false" ] && [ "$MERGEABLE_STATE" != "dirty" ] && [ "$STALE_COUNT" -eq 0 ]; then
    echo "‚úÖ No violations, review threads, CI issues, or stale warnings found in PR #$PR_NUMBER"
    if [ "$CLAUDE_MODE" == "--claude" ]; then
        echo ""
        echo "ü§ñ No todo items needed - PR is completely clean!"
    fi
    exit 0
fi

# Display violations in human-readable format
if [ "$VIOLATIONS_COUNT" -gt 0 ]; then
    echo "‚ö†Ô∏è  AUTOMATED VIOLATIONS:"
    echo "$VIOLATIONS_JSON" | jq -r '.[] | 
        "üìÅ File: \(.file)\nüìç Line: \(.line)\n‚ö†Ô∏è  Severity: \(.severity)\nüîß Rule: \(.rule)\nü§ñ Reporter: \(.reporter)\nüí¨ Message: \(.message)\n" + ("‚îÄ" * 80)'
    echo ""
fi

# Display review threads
if [ "$REVIEW_THREADS_COUNT" -gt 0 ]; then
    echo "üí¨ REVIEW THREADS:"
    echo "$REVIEW_THREADS" | jq -r --arg pr_author "$PR_AUTHOR" '.[] | 
        "üìÅ File: \(.file)\nüìç Line: \(.line)\nüí≠ Thread: \(.thread_length) comments\nüë§ Last response: \(.last_comment_author)\n" + 
        (if .last_comment_author == $pr_author then "‚úÖ Status: Author responded" else "‚ùì Status: Awaiting author response" end) + 
        "\n" + ("‚îÄ" * 80)'
    echo ""
fi

echo "üìä Summary: Found $VIOLATIONS_COUNT violation(s), $REVIEW_THREADS_COUNT review thread(s), $FAILED_CHECK_COUNT failed check(s), $STALE_COUNT stale warning(s)"
if [ "$MERGEABLE" = "false" ] || [ "$MERGEABLE_STATE" = "dirty" ]; then
    echo "üö® Merge conflicts detected - cannot merge until resolved"
fi
if [ "$STALE_COUNT" -gt 0 ]; then
    echo "‚ö†Ô∏è  Stale PR detected - may be auto-closed soon"
fi

# Claude mode - generate todo list
if [ "$CLAUDE_MODE" == "--claude" ]; then
    echo ""
    echo "ü§ñ Generating todo list for Claude Code..."
    echo ""
    
    # Count actionable items (violations + threads needing author response + CI failures + merge conflicts + stale warnings)
    ACTIONABLE_VIOLATIONS=$VIOLATIONS_COUNT
    ACTIONABLE_THREADS=$(echo "$REVIEW_THREADS" | jq --arg pr_author "$PR_AUTHOR" '[.[] | select(.last_comment_author != $pr_author)] | length')
    ACTIONABLE_CI=$FAILED_CHECK_COUNT
    ACTIONABLE_MERGE=$([ "$MERGEABLE" = "false" ] || [ "$MERGEABLE_STATE" = "dirty" ] && echo 1 || echo 0)
    ACTIONABLE_STALE=$STALE_COUNT
    TOTAL_ACTIONABLE=$((ACTIONABLE_VIOLATIONS + ACTIONABLE_THREADS + ACTIONABLE_CI + ACTIONABLE_MERGE + ACTIONABLE_STALE))
    
    if [ "$TOTAL_ACTIONABLE" -eq 0 ]; then
        echo "üéâ No actionable items found!"
        echo ""
        if [ "$REVIEW_THREADS_COUNT" -gt 0 ]; then
            echo "üìù Review thread status: Author has responded to all reviewer comments"
        fi
        echo "‚úÖ PR appears ready for reviewer approval"
    else
        echo "Please create the following todos:"
        echo ""
        
        # Add violation todos
        if [ "$VIOLATIONS_COUNT" -gt 0 ]; then
            echo "$VIOLATIONS_JSON" | jq -r 'to_entries | .[] | 
                "TODO #\(.key + 1): Fix \(.value.severity | ascii_downcase) - \(.value.message | gsub("\\.$"; "")) in \(.value.file | split("/") | .[-1]) line \(.value.line)"' | 
            while read -r todo; do
                echo "  $todo"
            done
        fi
        
        # Add review thread todos  
        if [ "$ACTIONABLE_THREADS" -gt 0 ]; then
            echo "$REVIEW_THREADS" | jq -r --arg pr_author "$PR_AUTHOR" 'to_entries | .[] | select(.value.last_comment_author != $pr_author) |
                "TODO #\(.key + '$VIOLATIONS_COUNT' + 1): Respond to review comment in \(.value.file | split("/") | .[-1]) line \(.value.line)"' |
            while read -r todo; do
                echo "  $todo"
            done
        fi
        
        # Add CI failure todos
        if [ "$ACTIONABLE_CI" -gt 0 ]; then
            TODO_BASE=$((VIOLATIONS_COUNT + ACTIONABLE_THREADS))
            COUNTER=1
            echo "$FAILED_CHECKS" | while read -r check; do
                if [ -n "$check" ]; then
                    echo "  TODO #$((TODO_BASE + COUNTER)): Fix failed CI check: $check"
                    ((COUNTER++))
                fi
            done
        fi
        
        # Add merge conflict todo
        if [ "$ACTIONABLE_MERGE" -gt 0 ]; then
            TODO_NUM=$((VIOLATIONS_COUNT + ACTIONABLE_THREADS + ACTIONABLE_CI + 1))
            case "$MERGEABLE_STATE" in
                "dirty")
                    echo "  TODO #$TODO_NUM: Resolve merge conflicts (rebase or merge base branch)"
                    ;;
                *)
                    echo "  TODO #$TODO_NUM: Fix merge issues (state: $MERGEABLE_STATE)"
                    ;;
            esac
        fi
        
        # Add stale PR todo
        if [ "$ACTIONABLE_STALE" -gt 0 ]; then
            TODO_NUM=$((VIOLATIONS_COUNT + ACTIONABLE_THREADS + ACTIONABLE_CI + ACTIONABLE_MERGE + 1))
            echo "  TODO #$TODO_NUM: Address stale PR warning (add activity or remove stale label)"
        fi
        
        echo ""
        echo "üí° Suggested workflow:"
        echo "   1. Create todos using TodoWrite tool"
        echo "   2. Mark each todo as 'in_progress' when working on it" 
        echo "   3. Fix violations or respond to review comments"
        echo "   4. Mark todo as 'completed' when fixed"
        echo "   5. Re-run this script to verify all items are resolved"
    fi
fi