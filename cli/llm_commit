#!/bin/bash
# Local LLM Git Commit Assistant
# 
# This script is a wrapper around llm_commit.py that makes it easier to use
# from the command line.

# Find the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Check if ollama is running
if ! curl -s http://localhost:11434/api/tags &>/dev/null; then
  echo -e "\033[91mError: Ollama server is not running.\033[0m"
  echo -e "\033[93mStart it with: 'ollama serve'\033[0m"
  exit 1
fi

# Special cases for shortcut commands
if [ "$1" = "s" ] || [ "$1" = "-s" ] || [ "$1" = "--short" ]; then
  # Run with compact style
  shift # Remove the first argument
  python3 "$SCRIPT_DIR/llm_commit.py" --style compact "$@"
# Special case for quick PR workflow
elif [ "$1" = "pr" ]; then
  # Run with PR creation
  shift # Remove the first argument
  python3 "$SCRIPT_DIR/llm_commit.py" --push --pr "$@"
# Special case for branch and PR workflow
elif [ "$1" = "branch" ] && [ -n "$2" ]; then
  # Create branch, commit, and create PR
  branch_name="$2"
  shift 2 # Remove the first two arguments
  python3 "$SCRIPT_DIR/llm_commit.py" --branch "$branch_name" --push --pr "$@"
elif [ $# -eq 0 ]; then
  # If no args are provided, just run the Python script
  python3 "$SCRIPT_DIR/llm_commit.py"
else
  python3 "$SCRIPT_DIR/llm_commit.py" "$@"
fi